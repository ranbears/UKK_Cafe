import 'dart:io';
import 'package:flutter/material.dart';
import 'package:image_picker/image_picker.dart';
import 'package:ukk_cafe/Models/menumodel.dart';
import 'package:ukk_cafe/service/servicemenu.dart';

class AddMenuPage extends StatefulWidget {
  @override
  _AddMenuPageState createState() => _AddMenuPageState();
}

class _AddMenuPageState extends State<AddMenuPage> {
  final MenuService _menuService = MenuService();
  final TextEditingController _nameController = TextEditingController();
  final TextEditingController _categoryController = TextEditingController();
  final TextEditingController _priceController = TextEditingController();
  final TextEditingController _infoController = TextEditingController();

  File? _imageFile;

  Future<void> _pickImage() async {
    try {
      final pickedFile = await ImagePicker().pickImage(source: ImageSource.gallery);
      if (pickedFile != null) {
        setState(() {
          _imageFile = File(pickedFile.path);
        });
      }
    } catch (e) {
      print('Error picking image: $e');
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error picking image: $e')),
      );
    }
  }

  void _saveMenu() async {
    String name = _nameController.text.trim();
    String category = _categoryController.text.trim();
    String price = _priceController.text.trim();
    String info = _infoController.text.trim();

    if (name.isEmpty || price.isEmpty) {
      _showErrorDialog('Name and Price must be filled out.');
      return;
    }

    // Parse price as double
    double? parsedPrice = double.tryParse(price.replaceAll(RegExp(r'[^\d.]'), ''));
    if (parsedPrice == null) {
      _showErrorDialog('Price must be a valid number.');
      return;
    }

    MenuItem newItem = MenuItem(
      id: '', // ID will be generated by Firestore
      name: name,
      category: category,
      price: parsedPrice, // Use parsedPrice directly
      info: info,
      imageUrl: '', // Update with actual image URL if needed
    );

    // Check if an image file is selected and upload it
    // if (_imageFile != null) {
    //   newItem.imageUrl = await _menuService._uploadImage(_imageFile!);
    // }

    await _menuService.addMenu(newItem);

    _showSuccessDialog();
  }

  void _showErrorDialog(String message) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text('Error'),
          content: Text(message),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.of(context).pop();
              },
              child: Text('OK'),
            ),
          ],
        );
      },
    );
  }

  void _showSuccessDialog() {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text('Success'),
          content: Text('Item has been saved successfully.'),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.of(context).pop();
                Navigator.of(context).pop(); // Navigate back to MenuPage
              },
              child: Text('OK'),
            ),
          ],
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Container(
        height: double.infinity,
        decoration: BoxDecoration(
          color: Color(0xFFF5E9D3),
        ),
        child: Column(
          children: [
            _buildHeader(),
            SizedBox(height: 20),
            _buildImagePicker(),
            SizedBox(height: 20),
            _buildFormFields(),
            SizedBox(height: 20),
            _buildSaveButton(),
          ],
        ),
      ),
    );
  }

  Widget _buildHeader() {
    return Container(
      padding: EdgeInsets.symmetric(horizontal: 16.0),
      height: 150,
      width: 70,
      decoration: BoxDecoration(
        color: Color(0xFF8B5D57),
        borderRadius: BorderRadius.only(
          bottomLeft: Radius.circular(30),
          bottomRight: Radius.circular(30),
        ),
      ),
      child: Row(
        children: [
          IconButton(
            icon: Icon(Icons.arrow_back, color: Colors.white),
            onPressed: () {
              Navigator.of(context).pop();
            },
          ),
          Spacer(),
          Text(
            'Add Menu',
            style: TextStyle(
              fontSize: 24,
              fontWeight: FontWeight.bold,
              color: Color(0xFFF5E9D3),
            ),
          ),
          Spacer(flex: 2),
        ],
      ),
    );
  }

  Widget _buildImagePicker() {
    return GestureDetector(
      onTap: _pickImage,
      child: Container(
        height: 150,
        width: double.infinity,
        margin: EdgeInsets.symmetric(horizontal: 16.0),
        decoration: BoxDecoration(
          border: Border.all(color: Color(0xFF8B5D57), width: 1),
          borderRadius: BorderRadius.circular(20),
        ),
        child: _imageFile == null
            ? const Icon(Icons.add_a_photo, size: 30, color: Colors.grey)
            : Image.file(_imageFile!, fit: BoxFit.cover),
      ),
    );
  }

  Widget _buildFormFields() {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 16.0),
      child: Column(
        children: [
          _buildTextField(_nameController, 'Nama*'),
          SizedBox(height: 10),
          _buildTextField(_categoryController, 'Kategori'),
          SizedBox(height: 10),
          _buildTextField(_priceController, 'Harga*', keyboardType: TextInputType.number),
          SizedBox(height: 10),
          _buildTextField(_infoController, 'Info'),
        ],
      ),
    );
  }

  Widget _buildTextField(TextEditingController controller, String hint, {TextInputType keyboardType = TextInputType.text}) {
    return TextField(
      controller: controller,
      keyboardType: keyboardType,
      decoration: InputDecoration(
        hintText: hint,
        filled: true,
        fillColor: Colors.white,
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(15.0),
          borderSide: BorderSide.none,
        ),
      ),
    );
  }

  
  Widget _buildSaveButton() {
    return ElevatedButton(
      onPressed: _saveMenu,
      style: ElevatedButton.styleFrom(
        backgroundColor: Color(0xFF8B5D57),
        padding: EdgeInsets.symmetric(horizontal: 165, vertical: 10),
      ),
      child: Text(
        'Simpan',
        style: TextStyle(fontSize: 18, color: Colors.white),
      ),
    );
  }
}
